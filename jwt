Steps to Generate a JWT Token Manually
A JWT consists of three parts:

Header (Base64 encoded)
Payload (Base64 encoded)
Signature (HMAC SHA-256 signed)
Each part is separated by a . (dot).

1. Create a New Console App in Visual Studio
Follow the same steps as before to create a Console App in Visual Studio.

2. Write C# Code to Generate a JWT Token Without External Libraries
Replace the content of Program.cs with the following code:
using System;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main()
    {
        string token = GenerateJwtToken();
        Console.WriteLine("Generated JWT Token:");
        Console.WriteLine(token);
    }

    public static string GenerateJwtToken()
    {
        string secretKey = "your_super_secret_key"; // Use a strong secret key

        // Step 1: Create Header
        string headerJson = "{\"alg\":\"HS256\",\"typ\":\"JWT\"}";
        string headerBase64 = Base64UrlEncode(Encoding.UTF8.GetBytes(headerJson));

        // Step 2: Create Payload (Claims)
        string payloadJson = "{\"sub\":\"JohnDoe\",\"userId\":123,\"exp\":" + GetExpiryTime() + "}";
        string payloadBase64 = Base64UrlEncode(Encoding.UTF8.GetBytes(payloadJson));

        // Step 3: Create Signature
        string signature = CreateHmacSha256Signature(headerBase64 + "." + payloadBase64, secretKey);

        // Step 4: Combine all parts
        return headerBase64 + "." + payloadBase64 + "." + signature;
    }

    // Convert to Base64 URL encoding (replace +, / and remove =)
    private static string Base64UrlEncode(byte[] input)
    {
        return Convert.ToBase64String(input)
            .TrimEnd('=')
            .Replace('+', '-')
            .Replace('/', '_');
    }

    // Create HMAC SHA-256 Signature
    private static string CreateHmacSha256Signature(string data, string key)
    {
        using (var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key)))
        {
            byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));
            return Base64UrlEncode(hash);
        }
    }

    // Get token expiry time (1 hour from now)
    private static long GetExpiryTime()
    {
        return new DateTimeOffset(DateTime.UtcNow.AddHours(1)).ToUnixTimeSeconds();
    }
}

3. Explanation of the Code
Step 1 (Header): Defines algorithm (HS256) and type (JWT).
Step 2 (Payload): Contains claims like sub (subject), userId, and exp (expiry time).
Step 3 (Signature):
Uses HMAC SHA-256 to sign the token.
Encodes the signature using Base64Url encoding.
Step 4 (Combine JWT): Creates the final JWT in the format:
css
Copy
Edit
header.payload.signature
4. Run the Program
Click Start (▶) or press F5 to run the application.
The generated JWT token will be displayed in the console.
Example Output:

yaml
Copy
Edit
Generated JWT Token:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJKb2huRG9lIiwidXNlcklkIjoxMjMsImV4cCI6MTcxMzA5MzQ3Nn0.OJz6zKz5WW9PzUDB3QQlXgRMkh3nD5Jw7-mKbO7GFxI
5. Verify the Token
To check if the JWT is valid:

Copy the generated token.
Go to jwt.io.
Paste the token in the encoded JWT field.
Enter the secret key under "Verify Signature" to validate it.
6. What’s Next?
Would you like:

Validating JWT tokens manually?
Using JWT in an ASP.NET Core Web API?
Handling Refresh Tokens?
