using System;
using System.Security.Cryptography;
using System.Text;

class Program
{
    static void Main()
    {
        string token = GenerateJwtToken();
        Console.WriteLine("Generated JWT Token:");
        Console.WriteLine(token);
    }

    public static string GenerateJwtToken()
    {
        string secretKey = "your_super_secret_key"; // Use a strong secret key

        // Step 1: Create Header
        string headerJson = "{\"alg\":\"HS256\",\"typ\":\"JWT\"}";
        string headerBase64 = Base64UrlEncode(Encoding.UTF8.GetBytes(headerJson));

        // Step 2: Create Payload (Claims)
        string payloadJson = "{\"sub\":\"JohnDoe\",\"userId\":123,\"exp\":" + GetExpiryTime() + "}";
        string payloadBase64 = Base64UrlEncode(Encoding.UTF8.GetBytes(payloadJson));

        // Step 3: Create Signature
        string signature = CreateHmacSha256Signature(headerBase64 + "." + payloadBase64, secretKey);

        // Step 4: Combine all parts
        return headerBase64 + "." + payloadBase64 + "." + signature;
    }

    // Convert to Base64 URL encoding (replace +, / and remove =)
    private static string Base64UrlEncode(byte[] input)
    {
        return Convert.ToBase64String(input)
            .TrimEnd('=')
            .Replace('+', '-')
            .Replace('/', '_');
    }

    // Create HMAC SHA-256 Signature
    private static string CreateHmacSha256Signature(string data, string key)
    {
        using (var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(key)))
        {
            byte[] hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(data));
            return Base64UrlEncode(hash);
        }
    }

    // Get token expiry time (1 hour from now)
    private static long GetExpiryTime()
    {
        return new DateTimeOffset(DateTime.UtcNow.AddHours(1)).ToUnixTimeSeconds();
    }
}
